{"version":3,"sources":["App.js","store/actions/index.js","serviceWorker.js","store/reducers/app/index.js","store/reducers/index.js","store/index.js","i18n.js","index.js"],"names":["Div","styled","div","Home","About","Users","NoMatch","App","state","language","changeLanguage","a","setState","i18n","onClick","this","t","to","exact","path","React","Component","connect","setAppActive","app","active","dispatch","setApp","type","Boolean","window","location","hostname","match","initialState","reducers","combineReducers","action","createStore","composeWithDevTools","applyMiddleware","thunk","resources","en","translation","zhTW","use","initReactI18next","init","lng","fallbackLng","interpolation","escapeValue","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"klBAaA,IAAMA,E,MAAMC,EAAOC,IAAV,KAKT,SAASC,IACP,OAAO,oCAGT,SAASC,IACP,OAAO,qCAGT,SAASC,IACP,OAAO,qCAGT,SAASC,IACP,OAAO,uC,IAGHC,E,2MACJC,MAAQ,CACNC,SAAU,Q,EAGZC,e,sBAAiB,sBAAAC,EAAA,sDACa,SAAxB,EAAKH,MAAMC,UACb,EAAKG,SAAS,CACZH,SAAU,OAEZI,IAAKH,eAAe,QAEpB,EAAKE,SAAS,CACZH,SAAU,SAEZI,IAAKH,eAAe,SAVP,2C,wEAef,OACE,kBAACV,EAAD,KACE,4BAAQc,QAASC,KAAKL,gBAAiBK,KAAKP,MAAMC,UAClD,kBAAC,IAAD,MAAc,SAAAO,GAAC,OAAI,oCAAGA,EAAE,iBACxB,kBAAC,IAAD,KACE,6BACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAKN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAChB,EAAD,OAEF,kBAAC,IAAD,CAAOgB,KAAK,UACV,kBAACf,EAAD,OAEF,kBAAC,IAAD,CAAOe,KAAK,UACV,kBAACd,EAAD,OAEF,kBAAC,IAAD,CAAOc,KAAK,KACV,kBAACb,EAAD,e,GAnDEc,IAAMC,WA4ETC,eAVS,SAAAd,GAAK,MAAK,CAChCe,aAAcf,EAAMgB,IAAIC,WAGC,SAAAC,GACzB,MAAO,CACLC,OAAQ,kBAAMD,ECxGT,CACLE,KAAM,gBD2GKN,CAGbf,GErGkBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4lBClBN,IAAMC,EAAe,CACnBT,QAAQ,GCOKU,EAJEC,0BAAgB,CAC/BZ,IDDa,WAAmC,IAAlChB,EAAiC,uDAAzB0B,EAAcG,EAAW,uCAC/C,OAAQA,EAAOT,MACb,IAAK,UACH,OAAO,EAAP,GACKpB,EADL,CAEEiB,QAAQ,IAGZ,QACE,OAAOjB,MERE8B,wBACbH,EACAI,8BAAoBC,0BAAgBC,OCFhCC,EAAY,CAChBC,GAAI,CACFC,Y,OAEFC,KAAM,CACJD,Y,QAIJ/B,IAAKiC,IAAIC,KAAkBC,KAAK,CAC9BN,YACAO,IAAK,OACLC,YAAa,OACbC,cAAe,CACbC,aAAa,KAGFvC,EAAf,ECbAwC,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,OAEFC,SAASC,eAAe,SLoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b89b172f.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n// Redux\nimport { connect } from \"react-redux\";\nimport { setApp } from \"./store/actions\";\n// i18n\nimport { Translation } from \"react-i18next\";\nimport i18n from \"i18next\";\n// Router\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n//\nimport styled from \"styled-components\";\n\nconst Div = styled.div`\n  max-width: 1280px;\n  margin: 0 auto;\n`;\n\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Users() {\n  return <h2>Users</h2>;\n}\n\nfunction NoMatch() {\n  return <h1>Page404</h1>;\n}\n\nclass App extends React.Component {\n  state = {\n    language: \"zhTW\"\n  };\n\n  changeLanguage = async () => {\n    if (this.state.language === \"zhTW\") {\n      this.setState({\n        language: \"en\"\n      });\n      i18n.changeLanguage(\"en\");\n    } else {\n      this.setState({\n        language: \"zhTW\"\n      });\n      i18n.changeLanguage(\"zhTW\");\n    }\n  };\n\n  render() {\n    return (\n      <Div>\n        <button onClick={this.changeLanguage}>{this.state.language}</button>\n        <Translation>{t => <>{t(\"app.hello\")}</>}</Translation>\n        <Router>\n          <div>\n            <nav>\n              <ul>\n                <li>\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li>\n                  <Link to=\"/about\">About</Link>\n                </li>\n                <li>\n                  <Link to=\"/users\">Users</Link>\n                </li>\n              </ul>\n            </nav>\n\n            <Switch>\n              <Route exact path=\"/\">\n                <Home />\n              </Route>\n              <Route path=\"/about\">\n                <About />\n              </Route>\n              <Route path=\"/users\">\n                <Users />\n              </Route>\n              <Route path=\"*\">\n                <NoMatch />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n      </Div>\n    );\n  }\n}\n\nApp.propTypes = {\n  setApp: PropTypes.func,\n  setAppActive: PropTypes.bool\n};\n\nconst mapStateToProps = state => ({\n  setAppActive: state.app.active\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setApp: () => dispatch(setApp())\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// 基本型\r\nexport const setApp = () => {\r\n  return {\r\n    type: \"SET_APP\"\r\n  };\r\n};\r\n\r\n// 呼叫其他 action 型\r\nexport const selectLv1Option = index => async dispatch => {\r\n  await dispatch(setApp(index));\r\n};\r\n\r\n// 執行多件 function 型\r\nexport const fetchProduct = cbu => async dispatch => {\r\n  fetch(`/shopping/v1/compositions/productDetails/info/${cbu}`, {\r\n    credentials: \"include\",\r\n    headers: { \"content-type\": \"application/json\" },\r\n    mode: \"cors\"\r\n  })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      console.log(data);\r\n    });\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n  active: true\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_APP\":\r\n      return {\r\n        ...state,\r\n        active: false\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\n// import * as ActionTypes from \"../actionTypes\";\r\nimport app from \"./app\";\r\n\r\nconst reducers = combineReducers({\r\n  app\r\n});\r\n\r\nexport default reducers;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\";\r\nimport reducers from \"./reducers\";\r\n\r\nexport default createStore(\r\n  reducers,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n","import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport en from \"./locales/en.json\";\r\nimport tw from \"./locales/zhTW.json\";\r\n\r\nconst resources = {\r\n  en: {\r\n    translation: en\r\n  },\r\n  zhTW: {\r\n    translation: tw\r\n  }\r\n};\r\n\r\ni18n.use(initReactI18next).init({\r\n  resources,\r\n  lng: \"zhTW\", //預設語言\r\n  fallbackLng: \"zhTW\", //如果當前切換的語言沒有對應的翻譯則使用這個語言，\r\n  interpolation: {\r\n    escapeValue: false\r\n  }\r\n});\r\nexport default i18n;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport \"./i18n\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}